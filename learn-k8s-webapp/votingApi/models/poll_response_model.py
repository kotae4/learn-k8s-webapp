# coding: utf-8

"""
    learn-k8s-apiserver-net

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 1.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class PollResponseModel(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'poll_id': 'int',
        'title': 'str',
        'user': 'str',
        'expiration': 'datetime',
        'short_description': 'str',
        'vote_count': 'int'
    }

    attribute_map = {
        'poll_id': 'pollId',
        'title': 'title',
        'user': 'user',
        'expiration': 'expiration',
        'short_description': 'shortDescription',
        'vote_count': 'voteCount'
    }

    def __init__(self, poll_id=None, title=None, user=None, expiration=None, short_description=None, vote_count=None):  # noqa: E501
        """PollResponseModel - a model defined in Swagger"""  # noqa: E501
        self._poll_id = None
        self._title = None
        self._user = None
        self._expiration = None
        self._short_description = None
        self._vote_count = None
        self.discriminator = None
        if poll_id is not None:
            self.poll_id = poll_id
        if title is not None:
            self.title = title
        if user is not None:
            self.user = user
        if expiration is not None:
            self.expiration = expiration
        if short_description is not None:
            self.short_description = short_description
        if vote_count is not None:
            self.vote_count = vote_count

    @property
    def poll_id(self):
        """Gets the poll_id of this PollResponseModel.  # noqa: E501


        :return: The poll_id of this PollResponseModel.  # noqa: E501
        :rtype: int
        """
        return self._poll_id

    @poll_id.setter
    def poll_id(self, poll_id):
        """Sets the poll_id of this PollResponseModel.


        :param poll_id: The poll_id of this PollResponseModel.  # noqa: E501
        :type: int
        """

        self._poll_id = poll_id

    @property
    def title(self):
        """Gets the title of this PollResponseModel.  # noqa: E501


        :return: The title of this PollResponseModel.  # noqa: E501
        :rtype: str
        """
        return self._title

    @title.setter
    def title(self, title):
        """Sets the title of this PollResponseModel.


        :param title: The title of this PollResponseModel.  # noqa: E501
        :type: str
        """

        self._title = title

    @property
    def user(self):
        """Gets the user of this PollResponseModel.  # noqa: E501


        :return: The user of this PollResponseModel.  # noqa: E501
        :rtype: str
        """
        return self._user

    @user.setter
    def user(self, user):
        """Sets the user of this PollResponseModel.


        :param user: The user of this PollResponseModel.  # noqa: E501
        :type: str
        """

        self._user = user

    @property
    def expiration(self):
        """Gets the expiration of this PollResponseModel.  # noqa: E501


        :return: The expiration of this PollResponseModel.  # noqa: E501
        :rtype: datetime
        """
        return self._expiration

    @expiration.setter
    def expiration(self, expiration):
        """Sets the expiration of this PollResponseModel.


        :param expiration: The expiration of this PollResponseModel.  # noqa: E501
        :type: datetime
        """

        self._expiration = expiration

    @property
    def short_description(self):
        """Gets the short_description of this PollResponseModel.  # noqa: E501


        :return: The short_description of this PollResponseModel.  # noqa: E501
        :rtype: str
        """
        return self._short_description

    @short_description.setter
    def short_description(self, short_description):
        """Sets the short_description of this PollResponseModel.


        :param short_description: The short_description of this PollResponseModel.  # noqa: E501
        :type: str
        """

        self._short_description = short_description

    @property
    def vote_count(self):
        """Gets the vote_count of this PollResponseModel.  # noqa: E501


        :return: The vote_count of this PollResponseModel.  # noqa: E501
        :rtype: int
        """
        return self._vote_count

    @vote_count.setter
    def vote_count(self, vote_count):
        """Sets the vote_count of this PollResponseModel.


        :param vote_count: The vote_count of this PollResponseModel.  # noqa: E501
        :type: int
        """

        self._vote_count = vote_count

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(PollResponseModel, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, PollResponseModel):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
