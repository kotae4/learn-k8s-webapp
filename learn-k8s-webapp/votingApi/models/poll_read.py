# coding: utf-8

"""
    FastAPI

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 0.1.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class PollRead(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'title': 'str',
        'creator_id': 'str',
        'expiration_time': 'datetime',
        'short_description': 'str',
        'long_description': 'str',
        'poll_id': 'int',
        'created_time': 'datetime',
        'view_count': 'int',
        'vote_count': 'int',
        'choices': 'list[ChoiceRead]'
    }

    attribute_map = {
        'title': 'title',
        'creator_id': 'creator_id',
        'expiration_time': 'expiration_time',
        'short_description': 'short_description',
        'long_description': 'long_description',
        'poll_id': 'poll_id',
        'created_time': 'created_time',
        'view_count': 'view_count',
        'vote_count': 'vote_count',
        'choices': 'choices'
    }

    def __init__(self, title=None, creator_id=None, expiration_time=None, short_description=None, long_description=None, poll_id=None, created_time=None, view_count=None, vote_count=None, choices=None):  # noqa: E501
        """PollRead - a model defined in Swagger"""  # noqa: E501
        self._title = None
        self._creator_id = None
        self._expiration_time = None
        self._short_description = None
        self._long_description = None
        self._poll_id = None
        self._created_time = None
        self._view_count = None
        self._vote_count = None
        self._choices = None
        self.discriminator = None
        self.title = title
        self.creator_id = creator_id
        self.expiration_time = expiration_time
        self.short_description = short_description
        self.long_description = long_description
        self.poll_id = poll_id
        self.created_time = created_time
        self.view_count = view_count
        self.vote_count = vote_count
        self.choices = choices

    @property
    def title(self):
        """Gets the title of this PollRead.  # noqa: E501


        :return: The title of this PollRead.  # noqa: E501
        :rtype: str
        """
        return self._title

    @title.setter
    def title(self, title):
        """Sets the title of this PollRead.


        :param title: The title of this PollRead.  # noqa: E501
        :type: str
        """
        if title is None:
            raise ValueError("Invalid value for `title`, must not be `None`")  # noqa: E501

        self._title = title

    @property
    def creator_id(self):
        """Gets the creator_id of this PollRead.  # noqa: E501


        :return: The creator_id of this PollRead.  # noqa: E501
        :rtype: str
        """
        return self._creator_id

    @creator_id.setter
    def creator_id(self, creator_id):
        """Sets the creator_id of this PollRead.


        :param creator_id: The creator_id of this PollRead.  # noqa: E501
        :type: str
        """
        if creator_id is None:
            raise ValueError("Invalid value for `creator_id`, must not be `None`")  # noqa: E501

        self._creator_id = creator_id

    @property
    def expiration_time(self):
        """Gets the expiration_time of this PollRead.  # noqa: E501


        :return: The expiration_time of this PollRead.  # noqa: E501
        :rtype: datetime
        """
        return self._expiration_time

    @expiration_time.setter
    def expiration_time(self, expiration_time):
        """Sets the expiration_time of this PollRead.


        :param expiration_time: The expiration_time of this PollRead.  # noqa: E501
        :type: datetime
        """
        if expiration_time is None:
            raise ValueError("Invalid value for `expiration_time`, must not be `None`")  # noqa: E501

        self._expiration_time = expiration_time

    @property
    def short_description(self):
        """Gets the short_description of this PollRead.  # noqa: E501


        :return: The short_description of this PollRead.  # noqa: E501
        :rtype: str
        """
        return self._short_description

    @short_description.setter
    def short_description(self, short_description):
        """Sets the short_description of this PollRead.


        :param short_description: The short_description of this PollRead.  # noqa: E501
        :type: str
        """
        if short_description is None:
            raise ValueError("Invalid value for `short_description`, must not be `None`")  # noqa: E501

        self._short_description = short_description

    @property
    def long_description(self):
        """Gets the long_description of this PollRead.  # noqa: E501


        :return: The long_description of this PollRead.  # noqa: E501
        :rtype: str
        """
        return self._long_description

    @long_description.setter
    def long_description(self, long_description):
        """Sets the long_description of this PollRead.


        :param long_description: The long_description of this PollRead.  # noqa: E501
        :type: str
        """
        if long_description is None:
            raise ValueError("Invalid value for `long_description`, must not be `None`")  # noqa: E501

        self._long_description = long_description

    @property
    def poll_id(self):
        """Gets the poll_id of this PollRead.  # noqa: E501


        :return: The poll_id of this PollRead.  # noqa: E501
        :rtype: int
        """
        return self._poll_id

    @poll_id.setter
    def poll_id(self, poll_id):
        """Sets the poll_id of this PollRead.


        :param poll_id: The poll_id of this PollRead.  # noqa: E501
        :type: int
        """
        if poll_id is None:
            raise ValueError("Invalid value for `poll_id`, must not be `None`")  # noqa: E501

        self._poll_id = poll_id

    @property
    def created_time(self):
        """Gets the created_time of this PollRead.  # noqa: E501


        :return: The created_time of this PollRead.  # noqa: E501
        :rtype: datetime
        """
        return self._created_time

    @created_time.setter
    def created_time(self, created_time):
        """Sets the created_time of this PollRead.


        :param created_time: The created_time of this PollRead.  # noqa: E501
        :type: datetime
        """
        if created_time is None:
            raise ValueError("Invalid value for `created_time`, must not be `None`")  # noqa: E501

        self._created_time = created_time

    @property
    def view_count(self):
        """Gets the view_count of this PollRead.  # noqa: E501


        :return: The view_count of this PollRead.  # noqa: E501
        :rtype: int
        """
        return self._view_count

    @view_count.setter
    def view_count(self, view_count):
        """Sets the view_count of this PollRead.


        :param view_count: The view_count of this PollRead.  # noqa: E501
        :type: int
        """
        if view_count is None:
            raise ValueError("Invalid value for `view_count`, must not be `None`")  # noqa: E501

        self._view_count = view_count

    @property
    def vote_count(self):
        """Gets the vote_count of this PollRead.  # noqa: E501


        :return: The vote_count of this PollRead.  # noqa: E501
        :rtype: int
        """
        return self._vote_count

    @vote_count.setter
    def vote_count(self, vote_count):
        """Sets the vote_count of this PollRead.


        :param vote_count: The vote_count of this PollRead.  # noqa: E501
        :type: int
        """
        if vote_count is None:
            raise ValueError("Invalid value for `vote_count`, must not be `None`")  # noqa: E501

        self._vote_count = vote_count

    @property
    def choices(self):
        """Gets the choices of this PollRead.  # noqa: E501


        :return: The choices of this PollRead.  # noqa: E501
        :rtype: list[ChoiceRead]
        """
        return self._choices

    @choices.setter
    def choices(self, choices):
        """Sets the choices of this PollRead.


        :param choices: The choices of this PollRead.  # noqa: E501
        :type: list[ChoiceRead]
        """
        if choices is None:
            raise ValueError("Invalid value for `choices`, must not be `None`")  # noqa: E501

        self._choices = choices

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(PollRead, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, PollRead):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
